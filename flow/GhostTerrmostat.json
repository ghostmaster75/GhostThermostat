[
    {
        "id": "ab8fb1c28921f1dd",
        "type": "ui_template",
        "z": "d6c548e700f619c9",
        "group": "9c90a075584ede2b",
        "name": "GhostThermostat",
        "order": 2,
        "width": "6",
        "height": "6",
        "format": "<style>\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');\n    \n    svg {\n        transition: all .6s cubic-bezier(0.175, 0.885, 0.32, 1.2);\n    }\n\n    stop {\n        transition: all .5s;\n    }\n    \n\t.led {\n    \t-webkit-transition: all 0.5s;\n    \ttransition: all 0.5s;\n    \tfill: url(#ledColor);\n    }\n    \n    .fa-text {\n       font-family: FontAwesome !important; \n    }\n    .dial {\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n    }\n    .qGradient {\n       fill : url(#qGradient);\n    }\n    .qGradientT {\n        fill : url(#qGradientT);\n    }\n    .eGradient {\n        fill : url(#eGradient);\n    }\n    .lbl {\n        font-family: 'Roboto', sans-serif;\n        text-anchor: middle;\n        fill : #ffffff;\n        clip-path: url(#qClip);\n    }\n    .lblDial {\n        fill: #dddddd;\n    }\n    \n    .lblAmbient {\n        font-weight: 400;\n        clip-path: url(#qClip);\n    }\n    \n    .lblAmbient tspan {\n        font-weight: 400;\n    }\n    \n    .lblTarget {\n        font-weight: 400;\n        fill: orange;\n    }\n    \n    .lblTarget tspan {\n        font-weight: 400;\n        fill: orange;\n        clip-path: url(#qClip);\n    }    \n    \n    .nodisplay {\n        display: none !important;\n    }\n    \n    .icon {\n        font-family: FontAwesome !important;\n    }\n    \n    .animate {\n        transition: all 0.5s;\n    }\n\n</style>\n<div id=\"GhostThermostat\"></div> \n<script>\nvar mousedownID = -1;\nvar ghostThermostatDial = (function() {\n\tconsole.log(\"START\");\n\n\tfunction createSVGElement(tag, attributes, appendTo) {\n\t\tvar element = document.createElementNS('http://www.w3.org/2000/svg', tag);\n\t\tattr(element, attributes);\n\t\tif (appendTo) {\n\t\t\tappendTo.appendChild(element);\n\t\t}\n\t\treturn element;\n\t}\n\n\tfunction attr(element, attrs) {\n\t\tfor (var i in attrs) {\n\t\t\telement.setAttribute(i, attrs[i]);\n\t\t}\n\t}\n\n\tfunction setClass(el, className, state) {\n\t\tel.classList[state ? 'add' : 'remove'](className);\n\t}\n\n\treturn function(targetElement, options) {\n\t\tconsole.log(\"RET FUN\");\n\t\tvar self = this;\n\n\t\t/*\n\t\t * Options\n\t\t */\n\t\toptions = options || {};\n\t\toptions = {\n\t\t\tdiameter: options.diameter || 400,\n\t\t\tmintemp: options.mintemp || 10, // Minimum value for target temperature\n\t\t\tmaxtemp: options.maxtemp || 30, // Maximum value for target temperature\n\t\t\tledColors : {'off' : 'rgb(143,141,141)', 'heating' : 'rgb(255,128,0)', 'cooling' : 'rgb(81,170,214)'}, //Led Ring Colors\n\t\t\tlabels : {ambient : \"AMBIENT\", set : \"SET\", mode : \"MODE\", minus : \"-\", plus : \"+\", left : \"<\", right : \">\"},\n\t\t\tonChangeState: options.onChangeState || function() {} // Function called when  switch state change\n\t\t};\n\n\t\t/*\n\t\t * Properties\n\t\t */\n\t\tvar properties = {\n\t\t\tradius: options.diameter / 2,\n\t\t\tmodes: [{\n\t\t\t\tlabel: \"heating\",\n\t\t\t\ticon: \"\\uf06d\",\n\t\t\t\tcolor: \"orange\"\n\t\t\t}, {\n\t\t\t\tlabel: 'cooling',\n\t\t\t\ticon: \"\\uf2dc\",\n\t\t\t\tcolor: \"rgb(81,170,214)\"\n\t\t\t}, {\n\t\t\t\tlabel: \"off\",\n\t\t\t\ticon: \"\\uf011\",\n\t\t\t\tcolor: \"rgb(230,0,0)\"\n\t\t\t} /*, {\n\t\t\t\tlabel: 'away',\n\t\t\t\ticon: \"\\uf1ce\",\n\t\t\t\tcolor: \"gray\"\n\t\t\t} */],\n\t\t\tmodeNames : [\"heating\", \"cooling\", \"off\"],\n\t\t\tswtitchStates : [\"heating\", \"cooling\", \"off\"]\n\t\t};\n\n\t\t/*\n\t\t * Object state\n\t\t */\n\t\tvar state = {\n\t\t\ttarget_temperature: options.mintemp,\n\t\t\tambient_temperature: options.maxtemp,\n\t\t\tmode: properties.modes.indexOf(properties.modes[0]),\n\t\t\tswitch_state: 'off',\n\t\t\taway: false\n\t\t};\n\t\t\n\t\t/*\n\t\t * Property getter / setters\n\t\t */\n\t\tObject.defineProperty(this,'target_temperature',{\n\t\t\tget: function() {\n\t\t\t\treturn state.target_temperature;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tstate.target_temperature = rangedTemperature(+val);\n\t\t\t\trender()\n\t\t\t}\n\t\t});\n\t\t\n\t\tObject.defineProperty(this,'ambient_temperature',{\n\t\t\tget: function() {\n\t\t\t\treturn state.ambient_temperature;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tstate.ambient_temperature = +val;\n\t\t\t\trender();\n\t\t\t}\n\t\t});\n\t\t\n\t\tObject.defineProperty(this,'mode_name',{\n\t\t\tget: function() {\n\t\t\t\treturn properties.modeNames[state.mode];\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tif (properties.modeNames.indexOf(val)>=0) {\n\t\t\t\t\tstate.mode = properties.modeNames.indexOf(val);\n\t\t\t\t\trender();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tObject.defineProperty(this,'switch_state',{\n\t\t\tget: function() {\n\t\t\t\treturn state.switch_state;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tif (properties.swtitchStates.indexOf(val)>=0) {\n\t\t\t\t\tstate.switch_state = val;\n\t\t\t\t\trender();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t\tfunction str2bool(strvalue){\n          return (strvalue && typeof strvalue == 'string') ? (strvalue.toLowerCase() == 'true') : (strvalue == true);\n        }   \n        \n        Object.defineProperty(this,'away',{\n\t\t\tget: function() {\n\t\t\t\treturn state.away;\n\t\t\t},\n\t\t\tset: function(val) {\n\t\t\t\tstate.away = !!str2bool(val);\n\t\t\t\trender();\n\t\t\t}\n\t\t});\n        \n\t\t\n\t\t/*\n\t\t * SVG\n\t\t */\n\t\tvar svg = createSVGElement('svg', {\n\t\t\twidth: '100%', //options.diameter+'px',\n\t\t\theight: '100%', //options.diameter+'px',\n\t\t\tviewBox: '0 0 ' + options.diameter + ' ' + options.diameter,\n\t\t\tclass: 'dial'\n\t\t}, targetElement);\n\n\t\t// DEFS \n\t\tvar defs = createSVGElement('defs', null, svg);\n\n\t\tvar qgradient = createSVGElement('linearGradient', {\n\t\t\t'id': 'qGradient',\n\t\t\tgradientTransform: 'rotate(65)'\n\t\t}, defs);\n\t\tvar stop = createSVGElement('stop', {\n\t\t\t'offset': '50%',\n\t\t\t'stop-color': 'rgb(86,89,94)'\n\t\t}, qgradient);\n\t\tvar stop = createSVGElement('stop', {\n\t\t\t'offset': '65%',\n\t\t\t'stop-color': 'rgb(30,30,30)'\n\t\t}, qgradient);\n\n\t\tvar qGradientT = createSVGElement('linearGradient', {\n\t\t\t'id': 'qGradientT',\n\t\t\tgradientTransform: 'rotate(65)'\n\t\t}, defs);\n\t\tvar stop = createSVGElement('stop', {\n\t\t\t'offset': '55%',\n\t\t\t'stop-color': '#3b3e43',\n\t\t\t'stop-opacity': '1'\n\t\t}, qGradientT);\n\t\tvar stop = createSVGElement('stop', {\n\t\t\t'offset': '90%',\n\t\t\t'stop-color': 'rgb(0,0,0)',\n\t\t\t'stop-opacity': '1'\n\t\t}, qGradientT);\n\n\t\tvar clipPath = createSVGElement('clipPath', {\n\t\t\t'id': 'qClip',\n\t\t}, defs);\n\t\tvar circle = createSVGElement('circle', {\n\t\t\tcx: properties.radius,\n\t\t\tcy: properties.radius,\n\t\t\tr: properties.radius - 25\n\t\t}, clipPath);\n\n\n\t\tvar ledRingGradient = createSVGElement('radialGradient', {\n\t\t\t'id': 'ledColor',\n\t\t\t'cx': \"50%\",\n\t\t\t'cy': \"50%\",\n\t\t\t'r': \"95%\",\n\t\t\t'fx': \"50%\",\n\t\t\t'fy': \"50%\"\n\t\t}, defs);\n\t\tvar ledRingGradientColorIn = createSVGElement('stop', {\n\t\t\t'offset': '45%',\n\t\t\t'stop-color': 'rgb(255,0,130)',\n\t\t\t'stop-opacity': '1'\n\t\t}, ledRingGradient);\n\t\tvar ledRingGradientColorOut = createSVGElement('stop', {\n\t\t\t'offset': '65%',\n\t\t\t'stop-color': 'rgb(0,0,0)',\n\t\t\t'stop-opacity': '1'\n\t\t}, ledRingGradient);\n\n\t\tvar egradient = createSVGElement('linearGradient', {\n\t\t\t'id': 'eGradient',\n\t\t\tgradientTransform: 'rotate(55)'\n\t\t}, defs);\n\t\tvar stop = createSVGElement('stop', {\n\t\t\t'offset': '55%',\n\t\t\t'stop-color': '#888888',\n\t\t\t'stop-opacity': '1'\n\t\t}, egradient);\n\t\tvar stop = createSVGElement('stop', {\n\t\t\t'offset': '95%',\n\t\t\t'stop-color': '#333333',\n\t\t\t'stop-opacity': '1'\n\t\t}, egradient);\n\n\t\t// DIAL\n\t\tvar circle = createSVGElement('circle', {\n\t\t\tcx: properties.radius,\n\t\t\tcy: properties.radius,\n\t\t\tr: properties.radius,\n\t\t\tclass: 'eGradient'\n\t\t}, svg);\n\t\tvar ledRing = createSVGElement('circle', {\n\t\t\tcx: properties.radius,\n\t\t\tcy: properties.radius,\n\t\t\tr: properties.radius - 3,\n\t\t\t'stroke': 'black',\n\t\t\t'stroke-width': '1',\n\t\t\tclass: 'led'\n\t\t}, svg);\n\t\tvar circle = createSVGElement('circle', {\n\t\t\tcx: properties.radius,\n\t\t\tcy: properties.radius,\n\t\t\tr: properties.radius - 20,\n\t\t\tclass: 'qGradient'\n\t\t}, svg);\n\t\tvar circle = createSVGElement('circle', {\n\t\t\tcx: properties.radius,\n\t\t\tcy: properties.radius,\n\t\t\tr: properties.radius - 25,\n\t\t\tclass: 'qGradient'\n\t\t}, svg);\n\t\tvar lblMain = createSVGElement('text', {\n\t\t\tx: properties.radius,\n\t\t\ty: 70,\n\t\t\tclass: 'lbl lblDial'\n\t\t}, svg);\n\t\tvar lblMainText = document.createTextNode(options.labels.ambient);\n\t\tlblMain.appendChild(lblMainText);\n\n\t\tvar lblAmbient = createSVGElement('text', {\n\t\t\tx: properties.radius,\n\t\t\ty: 210,\n\t\t\t'font-size': '160',\n\t\t\tclass: 'lbl lblAmbient'\n\t\t}, svg);\n\t\tvar lblAmbientText = document.createTextNode('21');\n\t\tlblAmbient.appendChild(lblAmbientText);\n\t\tvar lblAmbientDec = createSVGElement('tspan', {\n\t\t\t'font-size': '60',\n\t\t}, lblAmbient);\n\t\tvar lblAmbientDecText = document.createTextNode('.5');\n\t\tlblAmbientDec.appendChild(lblAmbientDecText);\n\n\t\tvar line = createSVGElement('line', {\n\t\t\tx1: 55,\n\t\t\ty1: properties.radius + 35,\n\t\t\tx2: options.diameter - 55,\n\t\t\ty2: properties.radius + 35,\n\t\t\t'stroke': '#DDDDDD',\n\t\t\t'stroke-width': '1',\n\t\t\t'opacity': '0.8'\n\t\t}, svg);\n\n\t\tvar lblLeft = createSVGElement('text', {\n\t\t\tx: 125,\n\t\t\ty: properties.radius + 75,\n\t\t\tclass: 'lbl lblDial'\n\t\t}, svg);\n\t\tvar lblLeftText = document.createTextNode(options.labels.set);\n\t\tlblLeft.appendChild(lblLeftText);\n\n\t\tvar lblTarget = createSVGElement('text', {\n\t\t\tx: 125,\n\t\t\ty: properties.radius + 115,\n\t\t\t'font-size': '35',\n\t\t\tclass: 'lbl lblTarget'\n\t\t}, svg);\n\t\tvar lblTargetText = document.createTextNode('20');\n\t\tlblTarget.appendChild(lblTargetText);\n\n\t\tvar lblTargetDec = createSVGElement('tspan', {\n\t\t\t'font-size': '20',\n\t\t}, lblTarget);\n\n\t\tvar lblTargetDecText = document.createTextNode('.5');\n\t\tlblTargetDec.appendChild(lblTargetDecText);\n\n\t\tvar lblRight = createSVGElement('text', {\n\t\t\tx: options.diameter - 125,\n\t\t\ty: properties.radius + 75,\n\t\t\tclass: 'lbl lblDial'\n\t\t}, svg);\n\t\tvar lblRightText = document.createTextNode(options.labels.mode);\n\t\tlblRight.appendChild(lblRightText);\n\n\t\tvar lblMode = createSVGElement('text', {\n\t\t\tx: options.diameter - 125,\n\t\t\ty: properties.radius + 115,\n\t\t\t'font-size': '35',\n\t\t\tclass: 'lbl lblTarget icon'\n\t\t}, svg);\n\t\tvar lblModeText = document.createTextNode(properties.modes[0].icon);\n\t\tlblMode.appendChild(lblModeText);\n\n\t\tvar btnSet = createSVGElement('g', {\n\t\t\ttransform: 'translate(200,200)'\n\t\t}, svg);\n\t\tvar path = createSVGElement('path', {\n\t\t\td: 'M0,40 L0,175   A175,175 0 0,1 -175,40    z',\n\t\t\tfill: 'blue',\n\t\t\topacity: '0',\n\t\t\t'id': 'btnLeft'\n\t\t}, btnSet);\n\t\tvar path = createSVGElement('path', {\n\t\t\td: 'M0,40 L175,40   A175,175 0 0,1    0,175  z',\n\t\t\tfill: 'red',\n\t\t\topacity: '0',\n\t\t\t'id': 'btnRight'\n\t\t}, btnSet);\n\n\n\n\t\tdocument.getElementById(\"btnLeft\").onclick = function() {\n\t\t\tsetTargetClick();\n\t\t};\n\n\t\tdocument.getElementById(\"btnRight\").onclick = function() {\n\t\t\tsetModeClick();\n\t\t};\n\n\t\tvar targetPanel = false;\n\t\tvar modePanel = false;\n\n\t\tvar lblAmbientAttributes = {\n\t\t\tx: lblAmbient.getAttribute('x'),\n\t\t\ty: lblAmbient.getAttribute('y'),\n\t\t\tsize: lblAmbient.getAttribute('font-size')\n\t\t};\n\n\t\tvar lblAmbientDecAttributes = {\n\t\t\tx: lblAmbientDec.getAttribute('x'),\n\t\t\ty: lblAmbientDec.getAttribute('y'),\n\t\t\tsize: lblAmbientDec.getAttribute('font-size')\n\t\t};\n\n\t\tvar lblTargetAttributes = {\n\t\t\tx: lblTarget.getAttribute('x'),\n\t\t\ty: lblTarget.getAttribute('y'),\n\t\t\tsize: lblTarget.getAttribute('font-size')\n\t\t};\n\n\t\tvar lblTargetDecAttributes = {\n\t\t\tx: lblTargetDec.getAttribute('x'),\n\t\t\ty: lblTargetDec.getAttribute('y'),\n\t\t\tsize: lblTargetDec.getAttribute('font-size')\n\t\t};\n\n\t\tvar lblModeAttributes = {\n\t\t\tx: lblMode.getAttribute('x'),\n\t\t\ty: lblMode.getAttribute('y'),\n\t\t\tsize: lblMode.getAttribute('font-size')\n\t\t};\n\n\t\tvar lblRightAttributes = {\n\t\t\tx: lblRight.getAttribute('x'),\n\t\t\ty: lblRight.getAttribute('y'),\n\t\t\tsize: lblRight.getAttribute('font-size')\n\t\t};\n\n\t\tvar lblLeftAttributes = {\n\t\t\tx: lblLeft.getAttribute('x'),\n\t\t\ty: lblLeft.getAttribute('y'),\n\t\t\tsize: lblLeft.getAttribute('font-size')\n\t\t};\n\t\t\n\t\trender();\n\n        function setAmbientTemperature(ambientTemp) {\n            var splitValues =  separateDecValue(ambientTemp);\n\t\t\tlblAmbientText.textContent = splitValues.int;\n\t\t\tlblAmbientDecText.textContent = splitValues.dec;\n\t\t};\n\n\n\t\tfunction calcTargetTemperature(operation) {\n\t\t\tlet currentTemp = Number(parseFloat(lblTargetText.textContent + lblTargetDecText.textContent)).toFixed(1);\n\t\t\tlet targetTemp = (operation == '-' ? Number(Number(currentTemp) - 0.5).toFixed(1) : Number(Number(currentTemp) + 0.5).toFixed(1));\n\t\t\ttargetTemp = rangedTemperature(targetTemp);\n            setTargetTemperature(targetTemp);\n            chkSwitchState();\n\t\t};\n\t\t\n        function setTargetTemperature(targetTemp) {\n            var splitValues =  separateDecValue(targetTemp);\n\t\t\tlblTargetText.textContent = splitValues.int;\n\t\t\tlblTargetDecText.textContent = splitValues.dec;\n\t\t\tif (state.target_temperature != targetTemp) {\n\t\t\t    if (typeof options.onChangeState == 'function') {\n\t\t\t        state.target_temperature = targetTemp\n\t\t\t\t\toptions.onChangeState(self.switch_state);\n\t\t\t    };\n\t\t\t}\n\t\t};\n\t\t\n\t\tfunction separateDecValue(floatFalue) {\n\t\t    var int = Math.floor(floatFalue);\n\t\t    var dec = Math.floor(((floatFalue % 1) * 10)) > 0 ? (\".\" + Math.floor(((floatFalue % 1) * 10))) : \"\";\n\t\t    return {int , dec};\n\t\t};\n\t\t\n\t\tfunction rangedTemperature(temperature) {\n\t\t    temperature = temperature < options.mintemp ? options.maxtemp : temperature;\n\t\t\ttemperature = temperature > options.maxtemp ? options.mintemp : temperature;\n\t\t\treturn temperature;\n\t\t};\n\t\t\n\t\tfunction chkSwitchState() {\n\t\t    var switchState = state.switch_state;\n\t\t    switch (state.mode) {\n\t\t        case 0:\n\t\t            switchState = state.ambient_temperature < state.target_temperature ? 'heating' : 'off';\n\t\t            //setClass(ledRing, \"led-off\", 0);\n\t\t            break;\n\t\t        case 1:\n\t\t            switchState = state.ambient_temperature > state.target_temperature ? 'cooling' : 'off';\n\t\t            break;\n\t\t        default:\n\t\t            switchState = 'off';\n\t\t    };\n\t\t    \n\t\t    ledRingGradientColorIn.setAttribute('stop-color', options.ledColors[state.switch_state]);\n\t\t    \n\t\t    if (state.switch_state != switchState) {\n\t\t        state.switch_state = switchState;\n\t\t        self.switch_state = switchState;\n\t\t        if (typeof options.onChangeState == 'function') {\n\t\t\t\t\toptions.onChangeState(self.switch_state);\n\t\t\t    };\n\t\t    };\n\t\t};\n\t\t\n\n\t\tfunction resetButton() {\n\t\t\tdocument.getElementById(\"btnLeft\").onmousedown = \"\";\n\t\t\tdocument.getElementById(\"btnLeft\").onmouseup = \"\";\n\t\t\tdocument.getElementById(\"btnLeft\").onclick = function() {\n\t\t\t\tsetTargetClick();\n\t\t\t};\n\t\t\tdocument.getElementById(\"btnRight\").onmousedown = \"\";\n\t\t\tdocument.getElementById(\"btnRight\").onmouseup = \"\";\n\t\t\tdocument.getElementById(\"btnRight\").onclick = function() {\n\t\t\t\tsetModeClick();\n\t\t\t};\n\t\t};\n\n\t\tfunction switchMainView(element, originalAttributes, mainLabel, leftLabel, rightLabel, panelState) {\n\t\t\tsetClass(lblAmbient, \"nodisplay\", panelState);\n\t\t\tsetClass(lblMain, \"animate\", panelState);\n\t\t\tsetClass(lblLeft, \"animate\", panelState);\n\t\t\tsetClass(lblRight, \"animate\", panelState);\n\t\t\tsetClass(element, \"animate\", panelState);\n\n\t\t\tlblMainText.textContent = panelState ? mainLabel : options.labels.ambient;\n\t\t\tlblLeftText.textContent = panelState ? leftLabel : options.labels.set;\n\n\t\t\tlblLeft.setAttribute('y', panelState ? Number(lblLeftAttributes.y) + 40 : lblLeftAttributes.y);\n\t\t\tlblLeft.setAttribute('font-size', panelState ? \"3.5em\" : \"1em\");\n\n\t\t\tlblRightText.textContent = panelState ? rightLabel : options.labels.mode;\n\t\t\tlblRight.setAttribute('y', panelState ? Number(lblRightAttributes.y) + 40 : lblRightAttributes.y);\n\t\t\tlblRight.setAttribute('font-size', panelState ? \"3.5em\" : \"1em\");\n\n\t\t\telement.setAttribute('x', panelState ? lblAmbientAttributes.x : originalAttributes.x);\n\t\t\telement.setAttribute('x', panelState ? lblAmbientAttributes.x : originalAttributes.x);\n\t\t\telement.setAttribute('y', panelState ? lblAmbientAttributes.y : originalAttributes.y);\n\t\t\telement.setAttribute('font-size', panelState ? lblAmbientAttributes.size : originalAttributes.size);\n\n\t\t};\n\n\n\t\tfunction setTargetClick() {\n\n\t\t\ttargetPanel = targetPanel ? false : true;\n\t\t\tsetClass(lblMode, \"nodisplay\", targetPanel);\n\t\t\tswitchMainView(lblTarget, lblTargetAttributes, options.labels.set, options.labels.minus, options.labels.plus , targetPanel);\n\n\t\t\tlblTargetDec.setAttribute('font-size', targetPanel ? lblAmbientDecAttributes.size : lblTargetDecAttributes.size);\n\n\t\t\tif (targetPanel) {\n\t\t\t\tdocument.getElementById(\"btnLeft\").onclick = \"\";\n\t\t\t\tdocument.getElementById(\"btnRight\").onclick = \"\";\n\n\t\t\t\tdocument.getElementById(\"btnLeft\").onmousedown = function() {\n\t\t\t\t\tcalcTargetTemperature(\"-\");\n\t\t\t\t\tif (mousedownID == -1) { //Prevent multimple loops!\n\t\t\t\t\t\tmousedownID = setInterval(calcTargetTemperature, 500, '-');\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tdocument.getElementById(\"btnLeft\").onmouseup = function() {\n\t\t\t\t\tif (mousedownID != -1) { //Only stop if exists\n\t\t\t\t\t\tclearInterval(mousedownID);\n\t\t\t\t\t\tmousedownID = -1;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tdocument.getElementById(\"btnRight\").onmousedown = function() {\n\t\t\t\t\tcalcTargetTemperature(\"+\");\n\t\t\t\t\tif (mousedownID == -1) { //Prevent multimple loops!\n\t\t\t\t\t\tmousedownID = setInterval(calcTargetTemperature, 500, '+');\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tdocument.getElementById(\"btnRight\").onmouseup = function() {\n\t\t\t\t\tif (mousedownID != -1) { //Only stop if exists\n\t\t\t\t\t\tclearInterval(mousedownID);\n\t\t\t\t\t\tmousedownID = -1;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tlblTarget.onclick = function() {\n\t\t\t\t\tsetTargetClick();\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tresetButton()\n\t\t\t}\n\t\t};\n\n\t\tfunction setModeClick() {\n\n\t\t\tmodePanel = modePanel ? false : true;\n\t\t\tsetClass(lblTarget, \"nodisplay\", modePanel);\n\t\t\tswitchMainView(lblMode, lblModeAttributes, options.labels.mode, options.labels.left, options.labels.right, modePanel);\n\n\t\t\tif (modePanel) {\n\t\t\t    \n\t\t\t\tdocument.getElementById(\"btnLeft\").onclick = function() {\n\t\t\t\t    mode = state.mode;\n\t\t\t\t    mode = --mode < 0 ? properties.modes.length - 1 : mode;\n\t\t\t\t    console.log(\"MODE :\" + mode);\n\t\t\t\t    setModeName(properties.modeNames[mode]);\n\t\t\t\t    chkSwitchState();\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tdocument.getElementById(\"btnRight\").onclick = function() {\n\t\t\t\t    mode = state.mode;\n\t\t\t\t    mode = ++mode > properties.modes.length - 1 ? 0 : mode;\n\t\t\t\t    console.log(\"MODE :\" + mode);\n\t\t\t\t    setModeName(properties.modeNames[mode]);\n\t\t\t\t    chkSwitchState();\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tlblMode.onclick = function() {\n\t\t\t\t\tsetModeClick();\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tresetButton()\n\t\t\t}\n\t\t};\n\t\t\n\t\tfunction setModeName(modeName) {\n\t\t    lblMode.textContent = properties.modes[properties.modeNames.indexOf(modeName)].icon;\n\t\t\tlblMode.style.fill = properties.modes[properties.modeNames.indexOf(modeName)].color;\n\t\t\tstate.mode =properties.modeNames.indexOf(modeName);\n\t\t}\n\t\t\n\t\tfunction render() {\n\t\t    console.log(\"RENDER\");\n\t\t    setAmbientTemperature(self.ambient_temperature);\n\t\t    setTargetTemperature(self.target_temperature);\n\t\t    setModeName(self.mode_name);\n\t\t    chkSwitchState();\n\t\t};\n\n\t};\n})();\n\nvar initializing = true;\n\n(function(scope) {\n\tvar ghostThermostat = new ghostThermostatDial(document.getElementById('GhostThermostat'),{\n    \tonChangeState: function(v) {\n    \t    var p = {\n    \t        \"ambient_temperature\":ghostThermostat.ambient_temperature,\n    \t        \"target_temperature\":ghostThermostat.target_temperature,\n        \t    \"mode\": ghostThermostat.mode_name,\n        \t    \"switch_state\":v,\n    \t        \"away\":ghostThermostat.away\n    \t    };\n            scope.send({topic: \"changed_state\", payload: p});\n    \t}\n    });\n\n\tscope.$watch('msg', function(data) {\n\t\tif (initializing) {\n\t\t\tinitializing = false;\n\t\t} else {\n            ghostThermostat.ambient_temperature = data.payload.ambient_temperature || ghostThermostat.ambient_temperature;\n            ghostThermostat.target_temperature = data.payload.target_temperature || ghostThermostat.target_temperature;\n            ghostThermostat.mode_name = data.payload.mode || ghostThermostat.mode_name;\n            ghostThermostat.switch_state = data.payload.switch_state || ghostThermostat.switch_state;\n            ghostThermostat.away = data.payload.away || ghostThermostat.away;\n\t\t}\n\t});\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1030,
        "y": 420,
        "wires": [
            [
                "9854a9e5fd2ac2b8",
                "2d54542cf9c837f1"
            ]
        ],
        "icon": "font-awesome/fa-tachometer"
    },
    {
        "id": "9c90a075584ede2b",
        "type": "ui_group",
        "name": "Thermostat",
        "tab": "f394bc89e321d6f1",
        "order": 1,
        "disp": false,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f394bc89e321d6f1",
        "type": "ui_tab",
        "name": "Thermostat",
        "icon": "dashboard",
        "disabled": false,
        "hidden": true
    }
]
